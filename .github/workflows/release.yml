# Made by https://github.com/criskkky for SwiftlyCS2

name: Release CS2 Plugin

on:
  push:
    paths:
      - '**/core.lua'
      - '**/core.js'
      # - '**/core.ts' # Commented to avoid release without compiling

env:
  SOURCE_DIR: ./src
  INSTALL_PATH: /game/csgo/addons/swiftly/

jobs:
  generate-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Set PLUGIN_NAME
        run: |
          REPO_NAME=${{ github.event.repository.name }}
          if [[ $REPO_NAME == sw-* ]]; then
            PLUGIN_NAME=${REPO_NAME#sw-}
          else
            PLUGIN_NAME=$REPO_NAME
          fi
          echo "PLUGIN_NAME=$PLUGIN_NAME" >> $GITHUB_ENV

      - name: Check version and set variables
        run: |
          # Disable set -e temporarily to handle errors manually
          set +e
          
          # Search for core.lua recursively from the root
          CORE_FILE=$(find . -type f \( -name "core.lua" -o -name "core.js" -o -name "core.ts" \) | head -n 1 || true)

          if [ -z "$CORE_FILE" ]; then
            echo "‚ÑπÔ∏è Skipping: No 'core' file found in the repository."
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          echo "‚úÖ Found: '$(basename "$CORE_FILE")' file located at $CORE_FILE"

          # Check if the diff affects GetPluginVersion()
          
          CHANGED_IN_FUNCTION=$(git diff HEAD^ HEAD "$CORE_FILE" | grep -A 10 'function GetPluginVersion()' | grep -E '^\+.*return "[^"]*"' || true)
          if [ -z "$CHANGED_IN_FUNCTION" ]; then
            echo "‚ÑπÔ∏è Skipping: Changes in $CORE_FILE do not affect the version in GetPluginVersion(). Releases are only created when the 'return' changes."
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          echo "‚úÖ Detected: Change in the 'return' line of GetPluginVersion() in $CORE_FILE"

          # Extract the version from GetPluginVersion()
          NEW_VERSION=$(grep -A 10 'function GetPluginVersion()' "$CORE_FILE" | grep 'return "[^"]*"' | sed 's/.*return "\([^"]*\)".*/\1/' | head -n 1 || true)
          if [ -z "$NEW_VERSION" ]; then
            echo "‚ÑπÔ∏è Skipping: No valid version found in GetPluginVersion() in $CORE_FILE (expected: return \"...\"). Check the function syntax."
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          echo "‚úÖ Version: Extracted '$NEW_VERSION' from GetPluginVersion()"

          # Get all releases and check if the version already exists
          RELEASES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | .tag_name' || true)
          if echo "$RELEASES" | grep -q "^$NEW_VERSION$"; then
            echo "‚ÑπÔ∏è Skipping: Version '$NEW_VERSION' already exists as a release in ${{ github.repository }}."
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
            exit 0
          fi
          echo "‚úÖ Check: Version '$NEW_VERSION' does not exist as a prior release"

          # Clean the version for file names (no spaces, limited special characters)
          VERSION=$(echo "$NEW_VERSION" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "‚ÑπÔ∏è Info: Cleaned version for files: '$VERSION'"

          # Normalize the tag by adding 'v' if not present
          if [[ "$NEW_VERSION" =~ ^v ]]; then
            TAG_VERSION="$NEW_VERSION"
          else
            TAG_VERSION="v$NEW_VERSION"
          fi
          TAG_VERSION=$(echo "$TAG_VERSION" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "‚ÑπÔ∏è Info: Normalized tag for GitHub: '$TAG_VERSION'"

          # Get the latest tag
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=${LATEST_TAG#v}
            echo "‚ÑπÔ∏è Info: Latest tag found: '$LATEST_TAG' (version: '$LATEST_VERSION')"
          else
            LATEST_VERSION=""
            echo "‚ÑπÔ∏è Info: No previous tags found in the repository"
          fi

          # Decide whether to create the release
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" != "$VERSION" ]; then
            echo "‚úÖ Proceeding: Creating release for version '$VERSION' (tag: '$TAG_VERSION')"
            echo "CREATE_RELEASE=true" >> $GITHUB_ENV
          else
            echo "‚ÑπÔ∏è Skipping: Version '$VERSION' is identical to the latest tag '$LATEST_TAG'"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
          fi
        shell: /usr/bin/bash -e {0}

      - name: Create ZIP file
        if: env.CREATE_RELEASE == 'true'
        run: |
          cd ${{ env.SOURCE_DIR }}
          zip -r ../${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip .
          echo "‚úÖ Success: ZIP file created: ${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip"

      - name: Get recent commit messages since last release
        if: env.CREATE_RELEASE == 'true'
        run: |
          if [ -n "$LATEST_TAG" ]; then
            COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --oneline | sed 's/^/- /')
            echo "‚ÑπÔ∏è Info: Commit messages since '$LATEST_TAG':"
            echo "$COMMIT_MESSAGES"
          else
            COMMIT_MESSAGES="- Initial Release"
            echo "‚ÑπÔ∏è Info: This is the first release"
          fi
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Release
        if: env.CREATE_RELEASE == 'true'
        uses: softprops/action-gh-release@v2.2.1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          name: ${{ env.TAG_VERSION }}
          body: |
            **Changes:**
            ${{ env.COMMIT_MESSAGES }}

            **How to download ‚¨áÔ∏è**
            Click the file below named <code>${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip</code> in the assets section to start the download automatically.

            **How to install üì¶**
            Extract the compressed file and place the folder(s) in `${{ env.INSTALL_PATH }}`

            **Leave feedback ‚ù§Ô∏è**
            Please consider leaving a ‚≠ê if it's helpful to your server.
          draft: false
          prerelease: false
          files: |
            ./${{ env.PLUGIN_NAME }}-${{ env.VERSION }}.zip